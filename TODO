X 1. write text ~ 3 hours 0.5 days
     -main text
     -footer
X 2.  deploy ~ ?? -- 1 day
X 3. make a deploy script for scrabble
X 3. move input box lower (iphone bug)
X 3. fix auto scrolling bug on mobile !!!!!
X 4. mobile version grid: don't display score until you haven't end turn
X 5. "Player 2 submit a word" 

X 6. Don't let user end game without playing at least one round
X 7. Dialog asking if the player is sure to exit the page ~ 1 hours -- 0.5 days
X 8. layout/grid 
      X - create grid
      X - organize elements in the grid
      X - make sure page is looking nice when resizing 
X 9. create logo ~ 4 hours -- 1 day 
X 10. font/sizing choose font for every element, and size of the font for every element,  ~ 5 hours -- 1 day
    X - text
    X - buttons
    X - bingo switch
    X - score table
    - specify button width in %percents
X 11. color/ and shape ~ 10 hours -- 2 days
    - background
    - nav bar/ footer
    - buttons
    - table
    - rename start button
X 12. Create PLAYER WON
X 13. all above is working for both desktop and mobile ~ 3 hours -- 1 day
X 14. testing
X 15. linting
X 16. install GA - google analytics
X 17. make static page
X 19. figure out why the react snapshot adds bugs, and fix it
X 20. logo size should be shown with css
X 21. do event tracking with react-ga
X 22. change style for input box
X 23. change style for nameinput
X 24. change style of the github/facebook icons
X 25. change style for modifier container desktop
X 26. no scrolling for desktop
X 27. callPlayerToAction can be simplified
X 28. browser back button go back to gamesettings, forward button go to scorekeeper, saving the players names
X 29. reload shqould only be prompted when:
      X a. you are not in dev mode
      X b. you have played at least one move, and the game is not over
X 30. image preload/ was changed to prefetch
X 31. make notes for the history pushing, preloading images
X 32.rewrite instructions How to use scrabblescore online 

? 33. watch events with amplitude

Put the logEvent()/logEventInit() code in util.js, and only log when in production and not react-snap.
If the logEvent function raises an exception, do not break everything. Catch it and log it in the console. Use try { } catch {}
Refactor the code that test if is react-snap with a function from util.js
disable the player name input box if the app has not loaded yet.
Take out ReactGA events
logo should be clickable to go back to home page

instructions:
  put game over instructions in the same how to block of text. Instruction if -> when.
  Reiterate that you are replacing the pen and paper scoring.
  move -> turn
  Each turn can have three possiblities:
     - one word to submit: type the word in the inputbox. If one of the letter in your word is on a premium square (e.g., double-word), click on the letter tile and select the corresponding premium square. Then press end-turn.
     - More than one word to submit: Same as previously, but use the ADD WORD button.
     - no words to submit (pass): press the PASS button



you may contact me via email. -> you may contact the developer, Anna Maniuk, via email.








24. write documentation
25. put it on hackernews, reddit

20. i18n (internationalization - make website change languages) ~ 5 hours -- 3 day
21. make input correctly move coursor when clicking on arrows

19. Something to detect crashes. When someone crashes the app receive an email or simillar.



1) write a programm in JS that creates an HTTP server, the endpoint /work should sleep 100ms.
2) write the same program in python using flask
3) write a program in node that is invoked as follow:
  node bench.js URL N_REQUESTS N_CONCURRENT
    The program should perform a total of N_REQUESTS to the URL in question, and doing it with N_CONCURRENT connections.
    The program should print at the end how many replies it got grouped by HTTP status code (200, etc.)
    It should also print the average response time (latency) by status code.
    print total time to complete the N_REQUESTS.
    Not able to connect to URL can be considered as status code 599

See how many conection can be established to the each server concurrently.