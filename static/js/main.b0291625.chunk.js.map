{"version":3,"sources":["logic/util.js","logic/scoreLists.js","components/GameSettings/HomePage.js","components/GameSettings/icons.js","components/GameSettings/GameSettings.js","components/GameSettings/ShouldResume.js","logic/game.js","components/ScrabbleTile/ScrabbleTile.js","components/ScoreGrid/WordInTiles.js","components/ScoreGrid/ScoreGridCell.js","components/ScoreGrid/ScoreGrid.js","components/ScrabbleScoreKeeper/CallPlayerToAction.js","components/ScoreGrid/ScoreGridMobile.js","components/Tooltip/Tooltip.js","components/ScrabbleInputBox/ModifierTile.js","components/ScrabbleInputBox/WithModifierPopover.js","components/ScrabbleInputBox/ScrabbleInputBox.js","components/ScrabbleScoreKeeper/InGameControls.js","components/ScrabbleScoreKeeper/InGameOverControls.js","components/ScrabbleScoreKeeper/ScoreKeeper.js","components/ScrabbleScoreKeeper/App.js","serviceWorker.js","index.js"],"names":["startTime","scoreListsMap","en","language","scores","a","e","i","o","u","l","n","r","s","t","d","g","b","c","m","p","f","h","v","w","y","k","j","x","q","z","fr","ru","о","а","е","и","н","р","с","т","в","д","к","л","п","у","м","б","г","ь","я","ё","ы","й","з","ж","х","ц","ч","ш","э","ю","ф","щ","ъ","resizeArray","array","desiredLength","defaultValue","output","slice","length","push","__toggleSingleModifier","oldModifiers","modifier","toggleModifiers","modifiersA","filter","mod","modifiersB","concat","_toConsumableArray","scrabbleScore","word","modifiers","result","split","forEach","letter","score","toLowerCase","placedScore","includes","loggableWord","map","join","value","loggableGame","game","ms","loggableTurn","turn","isPassed","turnWords","words","bingo","turns","playersTurns","playerTurn","_","getTotalScore","numTurns","endTime","Date","getTime","durationMins","Math","floor","undefined","scrollToTop","document","getElementsByTagName","scrollIntoView","persistState","name","stateObj","window","localStorage","setItem","JSON","stringify","getPersistedState","state","getItem","parse","clearPersistedState","removeItem","HomePage","props","React","createElement","className","id","src","alt","children","SwapIcon","width","height","viewBox","fill","xmlns","stroke","strokeWidth","strokeLinecap","strokeLinejoin","GameSettings","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","handleChangeOfName","bind","_assertThisInitialized","handleChangeOfLanguage","handleGameStart","playerNames","isTagDisabled","_createClass","key","this","setState","navigator","userAgent","target","_ref2","_this$state","onGameStart","preventDefault","trim","reverse","reduce","acc","_this2","_this$state2","onChange","onSubmit","playerName","placeholder","disabled","type","onClick","handleSwapName","Component","ShouldResume","apply","arguments","onResume","Turn","isEmpty","getCurrentTurn","get","obj","Game","currentPlayerIndex","leftOversTurnNumber","currentTurn","_setTurn","getCurrentTurnNumber","newGame","empty","newPlayerIndex","history","playerIndex","isGameOver","move","reaperIndexes","total","abs","reapers","totalLeftOverScore","reaperIndex","letterIndex","_step","_iterator","_createForOfIteratorHelper","entries","done","_step2","_step$value","_slicedToArray","_iterator2","_ret","_loop","_step2$value","turnNumber","wordIndex","indexOf","newTurn","index","_objectSpread","err","_step3","_this3","_iterator3","_step4","_step3$value","_iterator4","_ret2","_loop2","_step4$value","_step5","_placedCount","_placedScore","_iterator5","_step6","_iterator6","placed","upToMove","_this4","totalScores","indexesOf","max","playerCopy","player","getLastPlayer","getCurrentPlayer","getLastTurn","totalScore","totals","getRunningTotals","numberOfPlayers","fromPlain","forwardRef","ref","onTouchStart","onTouchMove","onTouchEnd","modifierClass","role","onKeyDown","toUpperCase","WordInTiles","_len","args","Array","_key","tileEls","dragStartIndex","dragStartInitialPlaced","dragLastTouchIndex","initialModifiers","handleClickTile","_this$props","onSetGame","togglePlaced","setTileRef","el","findTileUnderTouch","touch","findIndex","rect","getBoundingClientRect","clientX","clientY","handleTouchStart","event","touches","handleTouchMove","min","_this$props2","updateModifiers","handleTouchEnd","_this$props3","letterTiles","ScrabbleTile","stopPropagation","ScoreGridCell","isMoveInGameOver","rows","rowSpan","colSpan","renderPassed","renderNormal","ScoreGrid","numRows","align","CallPlayerToAction","isMobile","callPlayerToAction","ScoreGridMobile","scope","moveRowText","areLeftOversSubmitted","isComplete","turnIndex","isCurrentPlayersTurn","Tooltip","_ref","tooltip","hideArrow","_objectWithoutProperties","_excluded","TooltipTrigger","Object","assign","arrowRef","tooltipRef","getArrowProps","getTooltipProps","placement","_ref3","getTriggerProps","triggerRef","ModifierTile","tileText","WithModifierPopover","handleClick","handleVisibilityChange","tooltipShown","newModifiers","argument","onVisibilityChange","trigger","portalContainer","getElementsByClassName","ScrabbleInputBox","textHiddenInput","createRef","focus","handleHiddenInputChange","handleTileClick","inFocus","substring","isLetterAllowed","current","keyCode","handleArrowClick","onBlur","onFocus","maxLength","autoComplete","autoCapitalize","spellCheck","autoCorrect","handleModifierChange","emptyWord","InGameControls","input","form","currentWord","_scrollToTop","handleChange","handleUndo","onUndo","reloadLastWord","handleAddWord","addWord","handleEndTurn","endTurn","handleBingo","setBingo","handleEndGame","endGame","_prevProps","_prevState","snapshot","adjustScrollPosition","prevRect","scrollBy","top","resetCurrentWord","getLastWord","undoDisabled","isCurrentWordEmpty","endTurnButtonText","isEndGameDisabled","getCurrentPlayerIndex","isBingoDisabled","some","isModifierChosen","isInstructionShown","isFirstTurn","isEndTurnDisabled","checked","htmlFor","InGameOverControls","handleLeftOvers","handleNewGame","onNewGame","reset","distributeLeftOversToReapers","getReapers","getSumOfLeftovers","submitButtonText","href","rel","aria-label","ScoreKeeper","handleSetGame","renderWinner","restoredState","games","createNewGame","currentGame","addToUndoStack","newState","ignoreLastGame","undoShouldIgnoreLastGame","previousGames","lastGame","lastPlayerTurn","currentPlayerTurn","turnBeforeLeftOvers","winners","getWinners","winnersTie","winnerIndex","_this$state3","controlProps","toDisplayCallPlayerToAction","renderLuckOrSkill","luckFactors","getLuckFactors","style","paddingTop","vals","console","log","round","App","handleWindowSizeChange","handlePopState","handleResetGame","resumeState","pushState","addEventListener","ReactGA","initialize","pageview","location","pathname","search","removeEventListener","innerWidth","resume","renderGame","Boolean","hostname","match","rootElement","hasChildNodes","hydrate","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0291625.chunk.js","sourcesContent":["import { scoreListsMap } from './scoreLists'\n\nlet startTime\n\nfunction msToMin(ms) {\n  const min = Math.floor(ms / (1000 * 60))\n  return min\n}\n\nexport function setStartTime() {\n  startTime = new Date().getTime()\n}\n\nexport function resizeArray(array, desiredLength, defaultValue) {\n  const output = array.slice(0, desiredLength)\n  while (output.length < desiredLength) output.push(defaultValue)\n  return output\n}\n\nexport function indexesOf(array, value) {\n  const result = []\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === value) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nfunction __toggleSingleModifier(oldModifiers, modifier) {\n  if (oldModifiers.length === 0) return [modifier]\n  return oldModifiers[0] === modifier ? [] : [modifier]\n}\n\nexport function toggleModifiers(oldModifiers, modifier) {\n  let modifiersA = oldModifiers.filter((mod) => mod === 'blank' || mod === 'placed')\n  let modifiersB = oldModifiers.filter((mod) => mod !== 'blank' && mod !== 'placed')\n\n  if (modifier === 'blank' || modifier === 'placed') modifiersA = __toggleSingleModifier(modifiersA, modifier)\n  else modifiersB = __toggleSingleModifier(modifiersB, modifier)\n\n  return [...modifiersA, ...modifiersB]\n}\n\nexport function isLetterAllowed(letter, language) {\n  return letter.toLowerCase() in scoreListsMap[language].scores\n}\n\nexport function scrabbleScore(word, modifiers, language) {\n  let result = 0\n\n  word.split('').forEach((letter, i) => {\n    let score = scoreListsMap[language].scores[letter.toLowerCase()]\n    for (let j = 0; j < modifiers[i].length; j++) {\n      // eslint-disable-next-line\n      switch (modifiers[i][j]) {\n        case 'blank':\n          score *= 0\n          break\n        case 'double-letter':\n          score *= 2\n          break\n        case 'triple-letter':\n          score *= 3\n          break\n      }\n    }\n    result += score\n  })\n\n  modifiers.forEach((modifier) => {\n    for (let j = 0; j < modifier.length; j++) {\n      // eslint-disable-next-line\n      switch (modifier[j]) {\n        case 'double-word':\n          result *= 2\n          break\n        case 'triple-word':\n          result *= 3\n          break\n      }\n    }\n  })\n  return result\n}\n\nexport function placedScore(word, modifiers, language) {\n  let result = 0\n\n  word.split('').forEach((letter, i) => {\n    let score = scoreListsMap[language].scores[letter.toLowerCase()]\n    if (modifiers[i].includes('placed')) {\n      result += score\n    }\n  })\n\n  return result\n}\n\nexport function logEventInit() {}\n\nexport function isStaticBuild() {\n  return navigator.userAgent === 'ReactSnap'\n}\n\nexport function isCordova() {\n  return navigator.userAgent.includes('cordova')\n}\n\nexport function isProduction() {\n  return process.env.NODE_ENV === 'production' // eslint-disable-line no-use-before-define\n}\n\nexport function isTest() {\n  return process.env.NODE_ENV === 'test'\n}\n\nexport function loggableWord(word) {\n  const modifiers = word.modifiers\n    .map((mod, i) => {\n      return mod.length === 0 ? null : `${i}:${mod.join()}`\n    })\n    .filter((mod) => !!mod)\n    .join(', ')\n\n  if (!modifiers) return word.value\n  return `${word.value} (${modifiers})`\n}\n\nexport function loggableGame(game) {\n  const loggableTurn = (turn) => {\n    if (turn.isPassed(game)) return 'PASS'\n\n    let turnWords = turn.words.map((w) => w.value).join('+')\n    if (turn.bingo) return `${turnWords} BINGO`\n\n    return turnWords\n  }\n  const turns = game.playersTurns.map((playerTurn) => playerTurn.map(loggableTurn).join(','))\n\n  const scores = game.playersTurns.map((_, i) => game.getTotalScore(i))\n\n  const numTurns = game.playersTurns[0].length - 1\n\n  const endTime = new Date().getTime()\n  const durationMins = startTime ? msToMin(endTime - startTime) : undefined\n\n  return { turns, scores, numTurns, durationMins }\n}\n\nexport function logEvent(eventName, eventData) {}\n\nexport function scrollToTop() {\n  const bodyElement = document.getElementsByTagName('body')\n  bodyElement[0].scrollIntoView(true)\n}\n\nexport function persistState(name, stateObj) {\n  window.localStorage.setItem(name, JSON.stringify(stateObj))\n}\n\nexport function getPersistedState(name) {\n  const state = window.localStorage.getItem(name)\n  return state ? JSON.parse(state) : null\n}\n\nexport function clearPersistedState(name) {\n  window.localStorage.removeItem(name)\n}\n\nexport default null\n","export const scoreListsMap = {\n  en: {\n    language: 'English',\n    scores: {\n      a: 1,\n      e: 1,\n      i: 1,\n      o: 1,\n      u: 1,\n      l: 1,\n      n: 1,\n      r: 1,\n      s: 1,\n      t: 1,\n      d: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      m: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      w: 4,\n      y: 4,\n      k: 5,\n      j: 8,\n      x: 8,\n      q: 10,\n      z: 10,\n    },\n  },\n  fr: {\n    language: 'French',\n    scores: {\n      e: 1,\n      a: 1,\n      i: 1,\n      n: 1,\n      o: 1,\n      r: 1,\n      s: 1,\n      t: 1,\n      u: 1,\n      l: 1,\n      d: 2,\n      m: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      j: 8,\n      q: 8,\n      k: 10,\n      w: 10,\n      x: 10,\n      y: 10,\n      z: 10,\n    },\n  },\n  ru: {\n    language: 'Russian',\n    scores: {\n      о: 1,\n      а: 1,\n      е: 1,\n      и: 1,\n      н: 1,\n      р: 1,\n      с: 1,\n      т: 1,\n      в: 1,\n      д: 2,\n      к: 2,\n      л: 2,\n      п: 2,\n      у: 2,\n      м: 2,\n      б: 3,\n      г: 3,\n      ь: 3,\n      я: 3,\n      ё: 3,\n      ы: 4,\n      й: 4,\n      з: 5,\n      ж: 5,\n      х: 5,\n      ц: 5,\n      ч: 5,\n      ш: 8,\n      э: 8,\n      ю: 8,\n      ф: 10,\n      щ: 10,\n      ъ: 10,\n    },\n  },\n}\n","import React from 'react'\n\nconst HomePage = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <img id=\"big-logo\" src=\"logo.png\" alt=\"Scrabble score logo\" />\n        </div>\n      </div>\n      <div className=\"mb-5\">{props.children}</div>\n    </div>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\n\nexport const SwapIcon = () => (\n  <svg width=\"34\" height=\"24\" viewBox=\"0 0 34 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M9 4V20M9 4L15 10M9 4L3 10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M25 20L25 4M25 20L19 14M25 20L31 14\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n","import React from 'react'\nimport './GameSettings.css'\nimport { resizeArray, isStaticBuild, setStartTime } from '../../logic/util'\nimport { persistState, getPersistedState } from '../../logic/util'\nimport HomePage from './HomePage'\nimport { SwapIcon } from './icons'\n\nconst MIN_PLAYERS = 2\nconst MAX_PLAYERS = 4\n\nclass GameSettings extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleChangeOfName = this.handleChangeOfName.bind(this)\n    this.handleChangeOfLanguage = this.handleChangeOfLanguage.bind(this)\n    this.handleGameStart = this.handleGameStart.bind(this)\n    this.state = {\n      playerNames: resizeArray([], MAX_PLAYERS, ''),\n      language: 'en',\n      isTagDisabled: true,\n    }\n  }\n\n  componentDidMount() {\n    let { playerNames } = getPersistedState('settings') || this.state\n    playerNames = resizeArray(playerNames, MAX_PLAYERS, '')\n    this.setState({ playerNames, isTagDisabled: isStaticBuild() })\n  }\n\n  handleChangeOfName(i, e) {\n    let { playerNames } = this.state\n    playerNames = playerNames.slice()\n    playerNames[i] = e.target.value\n    this.setState({ playerNames })\n  }\n\n  handleSwapName(i, j) {\n    let { playerNames } = this.state\n    playerNames = playerNames.slice()\n    ;[playerNames[i], playerNames[j]] = [playerNames[j], playerNames[i]]\n    this.setState({ playerNames })\n  }\n\n  handleChangeOfLanguage(e) {\n    this.setState({ language: e.target.value })\n  }\n\n  handleGameStart(e) {\n    let { playerNames, language } = this.state\n    const { onGameStart } = this.props\n    e.preventDefault() /* prevent form submission */\n\n    /* we discard any empty player names at the end */\n    const trimRightArray = (arr) => {\n      return arr\n        .reverse()\n        .reduce((acc, value) => (value || acc.length > 0 ? [...acc, value] : acc), [])\n        .reverse()\n    }\n\n    playerNames = playerNames.map((s) => s.trim())\n    playerNames = trimRightArray(playerNames)\n\n    persistState('settings', { playerNames })\n\n    if (playerNames.length < MIN_PLAYERS) playerNames = resizeArray(playerNames, MIN_PLAYERS, '')\n\n    onGameStart(\n      playerNames.map((name, i) => name || `Player ${i + 1}`),\n      language\n    )\n    setStartTime() // Recording start time of the game\n  }\n\n  render() {\n    const { playerNames, isTagDisabled, language } = this.state\n    return (\n      <HomePage>\n        <div className=\"language-choice-container\">\n          <p className=\"sel-lang\">Select the game language:</p>\n          <select\n            className=\"custom-select\"\n            id=\"language-select\"\n            value={language}\n            onChange={this.handleChangeOfLanguage}>\n            <option value=\"en\">English</option>\n            <option value=\"ru\">Russian</option>\n            <option value=\"fr\">French</option>\n          </select>\n        </div>\n        <form onSubmit={this.handleGameStart}>\n          <div className=\"player-names-choice-container\">\n            {playerNames.map((playerName, i) => (\n              <div key={i} className=\"d-flex align-items-center\">\n                <input\n                  onChange={(e) => this.handleChangeOfName(i, e)}\n                  value={playerName}\n                  className=\"form-control player-name flex-grow-1\"\n                  placeholder={`Player ${i + 1}`}\n                  disabled={isTagDisabled}\n                />\n                <div className=\"ml-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => this.handleSwapName(i, i + 1)}\n                    disabled={i === playerNames.length - 1 || isTagDisabled}\n                    className=\"btn disabled:hidden translate-y-swap-button\">\n                    <SwapIcon />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"start-btn-container\">\n            <button className=\"btn start\" type=\"submit\" disabled={isTagDisabled}>\n              START\n            </button>\n          </div>\n        </form>\n      </HomePage>\n    )\n  }\n}\n\nexport default GameSettings\n","import React from 'react'\nimport './GameSettings.css'\nimport HomePage from './HomePage'\n\nclass ShouldResume extends React.Component {\n  render() {\n    const { onResume } = this.props\n\n    return (\n      <HomePage>\n        <div className=\"row justify-content-around\">\n          <div className=\"col-sm-8\">\n            <div className=\"should-resume\">\n              <p>\n                You have a game in progress. <br />\n                Would you like to resume it?\n              </p>\n              <div className=\"buttons\">\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <button className=\"btn faded\" type=\"button\" onClick={() => onResume(false)}>\n                      No\n                    </button>\n                  </div>\n                  <div className=\"col\">\n                    <button className=\"btn\" type=\"button\" onClick={() => onResume(true)}>\n                      Yes\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </HomePage>\n    )\n  }\n}\n\nexport default ShouldResume\n","import { resizeArray, indexesOf, toggleModifiers, placedScore } from './util'\n\nclass Turn {\n  /* DONE Add test for passed display in the scoregrid */\n  /* DONE once test are added, refactor to take out the passed variable from Turn */\n  constructor(words, bingo) {\n    this.words = words\n    this.bingo = bingo\n  }\n\n  static empty() {\n    return new Turn([], false)\n  }\n\n  static fromPlain(obj) {\n    return new Turn(obj.words, obj.bingo)\n  }\n\n  isEmpty() {\n    return this.words.length === 0\n  }\n\n  isPassed(game) {\n    return this.isEmpty() && this !== game.getCurrentTurn()\n  }\n\n  isComplete(game) {\n    return this !== game.getCurrentTurn()\n  }\n\n  get score() {\n    let result = 0\n    for (let i = 0; i < this.words.length; i++) {\n      result += this.words[i].score\n    }\n\n    if (this.bingo) {\n      result += 50\n    }\n\n    return result\n  }\n}\n\nexport default class Game {\n  constructor(playersTurns, currentPlayerIndex, leftOversTurnNumber) {\n    this.currentPlayerIndex = currentPlayerIndex\n    this.playersTurns = playersTurns\n    this.leftOversTurnNumber = leftOversTurnNumber\n  }\n\n  static createNewGame(numberOfPlayers) {\n    const turn = Turn.empty()\n    const playersTurns = resizeArray([[turn]], numberOfPlayers, [])\n    return new Game(playersTurns, 0, null)\n  }\n\n  static fromPlain(obj) {\n    const turns = obj.playersTurns.map((player) => player.map((turn) => Turn.fromPlain(turn)))\n    return new Game(turns, obj.currentPlayerIndex, obj.leftOversTurnNumber)\n  }\n\n  addWord(word) {\n    const currentTurn = this.getCurrentTurn()\n    const turn = new Turn([...currentTurn.words, word], currentTurn.bingo)\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn)\n  }\n\n  endTurn() {\n    let newGame = this\n    if (this.getCurrentTurn().isEmpty()) {\n      newGame = this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), Turn.empty())\n    }\n    const newPlayerIndex = (this.currentPlayerIndex + 1) % this.playersTurns.length\n    const players = newGame.playersTurns.map((history, playerIndex) =>\n      playerIndex === newPlayerIndex ? [...history, Turn.empty()] : history\n    )\n    return new Game(players, newPlayerIndex, this.leftOversTurnNumber)\n  }\n\n  setBingo(value) {\n    const turn = new Turn(this.getCurrentTurn().words, value)\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn)\n  }\n\n  endGame() {\n    return new Game(this.playersTurns, this.currentPlayerIndex, this.getCurrentTurnNumber())\n  }\n\n  isGameOver() {\n    return this.leftOversTurnNumber !== null\n  }\n\n  areLeftOversSubmitted() {\n    if (\n      this.isGameOver() &&\n      this.playersTurns[this.playersTurns.length - 1][this.leftOversTurnNumber] &&\n      this.currentPlayerIndex === 0\n    ) {\n      return true\n    }\n    return false\n  }\n\n  isMoveInGameOver(move) {\n    return this.isGameOver() && move >= this.leftOversTurnNumber\n  }\n\n  getReapers() {\n    const reaperIndexes = []\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      if (this.playersTurns[i][this.leftOversTurnNumber].isEmpty()) {\n        reaperIndexes.push(i)\n      }\n    }\n    return reaperIndexes\n  }\n\n  getSumOfLeftovers() {\n    let total = 0\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      total += Math.abs(this.playersTurns[i][this.leftOversTurnNumber].score)\n    }\n    return total\n  }\n\n  distributeLeftOversToReapers(reapers, totalLeftOverScore) {\n    let game = this\n    reapers.forEach((reaperIndex) => {\n      const turn = new Turn(\n        [\n          {\n            value: '__reaped_leftovers__',\n            modifiers: [],\n            score: totalLeftOverScore,\n          },\n        ],\n        false\n      )\n      game = game._setTurn(reaperIndex, this.leftOversTurnNumber, turn)\n    })\n    return game\n  }\n\n  togglePlaced(word, letterIndex) {\n    let game = this\n    for (let [playerIndex, playerTurn] of game.playersTurns.entries()) {\n      for (let [turnNumber, turn] of playerTurn.entries()) {\n        const wordIndex = turn.words.indexOf(word)\n        if (wordIndex >= 0) {\n          const newTurn = new Turn(\n            turn.words.map((word, index) => {\n              if (index === wordIndex) {\n                const modifiers = word.modifiers.map((mod, i) =>\n                  letterIndex === i ? toggleModifiers(mod, 'placed') : mod\n                )\n                return { ...word, modifiers }\n              }\n              return word\n            }),\n            turn.bingo\n          )\n          return this._setTurn(playerIndex, turnNumber, newTurn)\n        }\n      }\n    }\n    return game\n  }\n\n  updateModifiers(word, modifiers) {\n    let game = this\n    for (let [playerIndex, playerTurn] of game.playersTurns.entries()) {\n      for (let [turnNumber, turn] of playerTurn.entries()) {\n        const wordIndex = turn.words.indexOf(word)\n        if (wordIndex >= 0) {\n          const newTurn = new Turn(\n            turn.words.map((word, index) => {\n              return index === wordIndex ? { ...word, modifiers } : word\n            }),\n            turn.bingo\n          )\n          return this._setTurn(playerIndex, turnNumber, newTurn)\n        }\n      }\n    }\n    return game\n  }\n\n  getLuckFactors(language) {\n    return this.playersTurns.map((turns, i) => {\n      let _placedCount = 0\n      let _placedScore = 0\n      for (let turn of turns) {\n        for (let word of turn.words) {\n          if (word.value === '__reaped_leftovers__') continue\n          _placedScore += placedScore(word.value, word.modifiers, language)\n          _placedCount += word.modifiers.filter((mod) => mod.includes('placed')).length\n        }\n      }\n      return {\n        placed: _placedCount,\n        score: _placedScore,\n      }\n    })\n  }\n\n  getWinners(upToMove) {\n    const totalScores = this.playersTurns.map((_, i) => this.getTotalScore(i, upToMove))\n    return indexesOf(totalScores, Math.max(...totalScores))\n  }\n\n  _setTurn(playerIndex, turnNumber, turn) {\n    const playerCopy = this.playersTurns[playerIndex].slice()\n    playerCopy[turnNumber] = turn\n    const newPlayers = this.playersTurns.map((player, i) => (i === playerIndex ? playerCopy : player))\n    return new Game(newPlayers, this.currentPlayerIndex, this.leftOversTurnNumber)\n  }\n\n  getLastPlayer() {\n    return this.playersTurns[(this.playersTurns.length + this.currentPlayerIndex - 1) % this.playersTurns.length]\n  }\n\n  getCurrentPlayer() {\n    return this.playersTurns[this.currentPlayerIndex]\n  }\n\n  getLastTurn() {\n    return this.getLastPlayer().slice(-1)[0]\n  }\n\n  getCurrentTurn() {\n    return this.getCurrentPlayer().slice(-1)[0]\n  }\n\n  getCurrentTurnNumber() {\n    return this.playersTurns[0].length - 1\n  }\n\n  getCurrentPlayerIndex() {\n    return this.currentPlayerIndex\n  }\n\n  getLastWord() {\n    const currentTurn = this.getCurrentTurn()\n    if (!currentTurn.isEmpty()) {\n      return currentTurn.words.slice(-1)[0]\n    }\n    const lastTurn = this.getLastTurn()\n    return lastTurn.words.slice(-1)[0]\n  }\n\n  getRunningTotals(playerIndex) {\n    const player = this.playersTurns[playerIndex]\n    let result = []\n    let totalScore = 0\n    for (let i = 0; i < player.length; i++) {\n      totalScore += player[i].score\n      result.push(totalScore)\n    }\n    return result\n  }\n\n  getTotalScore(playerIndex, upToMove) {\n    let totals = this.getRunningTotals(playerIndex)\n    if (upToMove !== undefined) return totals[upToMove]\n    return totals.length === 0 ? 0 : totals[totals.length - 1]\n  }\n}\n","import React from 'react'\nimport './ScrabbleTile.css'\n\nfunction ScrabbleTile(props, ref) {\n  const { modifier, letter, score, onTouchStart, onTouchMove, onTouchEnd, onClick } = props\n  const modifierClass = modifier.join(' ')\n  return (\n    <span\n      ref={ref}\n      className={`scrabble-letter ${modifierClass}`}\n      role=\"button\"\n      onTouchStart={onTouchStart}\n      onTouchMove={onTouchMove}\n      onTouchEnd={onTouchEnd}\n      onClick={onClick}\n      onKeyDown={onClick}>\n      {modifier.length !== 0 ? <span className=\"tile-modifier\"></span> : null}\n      <span className=\"letter\">{letter.toUpperCase()}</span>\n      <span className=\"score\">{score}</span>\n    </span>\n  )\n}\nexport default React.forwardRef(ScrabbleTile)\n","import React from 'react'\nimport { scrabbleScore } from '../../logic/util'\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile'\n\nclass WordInTiles extends React.Component {\n  tileEls = []\n  dragStartIndex = null\n  dragStartInitialPlaced = null\n  dragLastTouchIndex = null\n  initialModifiers = null\n\n  handleClickTile = (letterIndex) => {\n    const { game, word, language, onSetGame } = this.props\n    onSetGame(game.togglePlaced(word, letterIndex, language), false)\n  }\n\n  setTileRef = (el, letterIndex) => {\n    this.tileEls[letterIndex] = el\n  }\n\n  findTileUnderTouch = (touch) => {\n    return this.tileEls.findIndex((el) => {\n      const rect = el.getBoundingClientRect()\n      return (\n        rect.x <= touch.clientX &&\n        rect.y <= touch.clientY &&\n        rect.x + rect.width >= touch.clientX &&\n        rect.y + rect.height >= touch.clientY\n      )\n    })\n  }\n\n  handleTouchStart = (event) => {\n    const letterIndex = this.findTileUnderTouch(event.touches[0])\n    this.dragStartIndex = letterIndex\n    this.dragLastTouchIndex = letterIndex\n    this.initialModifiers = this.props.word.modifiers\n  }\n\n  handleTouchMove = (event) => {\n    const letterIndex = this.findTileUnderTouch(event.touches[0])\n    if (this.dragLastTouchIndex === letterIndex) return\n    this.dragLastTouchIndex = letterIndex\n    // update the game modifiers\n    const placed = !this.initialModifiers[this.dragStartIndex].includes('placed')\n    const modifiers = this.initialModifiers.map((mod, i) => {\n      if (\n        letterIndex !== -1 &&\n        i >= Math.min(this.dragStartIndex, letterIndex) &&\n        i <= Math.max(this.dragStartIndex, letterIndex)\n      ) {\n        if (placed && !mod.includes('placed')) {\n          return [...mod, 'placed']\n        } else if (!placed && mod.includes('placed')) {\n          return mod.filter((p) => p !== 'placed')\n        }\n      }\n      return mod\n    })\n    const { game, word, language, onSetGame } = this.props\n    onSetGame(game.updateModifiers(word, modifiers, language), false)\n  }\n\n  handleTouchEnd = () => {\n    this.dragStartIndex = null\n    this.dragStartInitialPlaced = null\n    this.dragLastTouchIndex = null\n    this.initialModifiers = null\n  }\n\n  render() {\n    const { word, language } = this.props\n    if (word.value === '__reaped_leftovers__') {\n      return <span className=\"reaper\">NO LEFTOVERS</span>\n    }\n    const letterTiles = word.value.split('').map((letter, i) => {\n      const tile = (\n        <ScrabbleTile\n          ref={(el) => this.setTileRef(el, i)}\n          key={i}\n          letter={letter}\n          modifier={word.modifiers[i]}\n          score={scrabbleScore(letter, [[]], language)}\n          onTouchStart={this.handleTouchStart}\n          onTouchMove={this.handleTouchMove}\n          onTouchEnd={this.handleTouchEnd}\n          onClick={(event) => {\n            event.stopPropagation()\n            this.handleClickTile(i)\n          }}\n        />\n      )\n      return tile\n    })\n    return <div>{letterTiles}</div>\n  }\n}\n\nexport default WordInTiles\n","import React from 'react'\nimport WordInTiles from './WordInTiles'\n\nclass ScoreGridCell extends React.Component {\n  renderPassed() {\n    const { game, move } = this.props\n    return (\n      <tr>\n        <td>{game.isMoveInGameOver(move) ? 'NO LEFTOVERS' : 'PASS'}</td>\n      </tr>\n    )\n  }\n\n  renderNormal() {\n    const { turn, language, game, onSetGame } = this.props\n    const rows = turn.words.map((word, i) => (\n      <tr key={`row-word-${i}`} className=\"word-row\">\n        <td className=\"word-cell\">\n          <WordInTiles word={word} language={language} game={game} onSetGame={onSetGame} />\n        </td>\n        {i === 0 ? (\n          <td rowSpan={`${turn.bingo ? turn.words.length + 1 : turn.words.length}`} className=\"score-cell\">\n            <span className=\"score-box\">{turn.score}</span>\n          </td>\n        ) : null}\n      </tr>\n    ))\n\n    if (turn.bingo) {\n      rows.push(\n        <tr key=\"bingo\">\n          <td colSpan=\"2\">BINGO!</td>\n        </tr>\n      )\n    }\n    return rows\n  }\n\n  render() {\n    const { turn, game } = this.props\n    return (\n      <table className=\"score-grid-cell\">\n        <tbody>{turn.isPassed(game) ? this.renderPassed() : this.renderNormal()}</tbody>\n      </table>\n    )\n  }\n}\n\nexport default ScoreGridCell\n","import React from 'react'\nimport ScoreGridCell from './ScoreGridCell'\nimport './ScoreGrid.css'\n\nfunction ScoreGrid(props) {\n  const { playerNames, game, language } = props\n  const getTurnClass = (turn, currentTurn) => (turn === currentTurn ? 'player-turn active' : 'player-turn')\n  const numRows = game.isGameOver() ? game.leftOversTurnNumber + 1 : game.getCurrentTurnNumber() + 1\n\n  return (\n    <table className=\"table table-bordered score-grid-table\" align=\"center\">\n      <thead>\n        <tr className=\"thead-rows\">\n          <th className=\"move-header\">Move</th>\n          {playerNames.map((player, i) => (\n            <th key={i} className=\"player-header\">\n              {player}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody className=\"tbody-rows\">\n        {[...Array(numRows)].map((_, i) => (\n          <tr className=\"turn-row\" key={i}>\n            <th className=\"move-number\">{i + 1}</th>\n            {game.playersTurns.map((player, j) => (\n              <td key={j} className={getTurnClass(player[i], game.getCurrentTurn())}>\n                {player[i] ? <ScoreGridCell turn={player[i]} move={i} language={language} game={game} /> : null}\n              </td>\n            ))}\n          </tr>\n        ))}\n        <tr className=\"total-score\">\n          <th className=\"move\">TOTAL</th>\n          {playerNames.map((_, i) => (\n            <td key={i}>{game.getTotalScore(i)}</td>\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nexport default ScoreGrid\n","import React from 'react'\n\nfunction CallPlayerToAction(props) {\n  const { isMobile, game, playerNames } = props\n\n  function callPlayerToAction() {\n    const playerName = playerNames[game.currentPlayerIndex]\n    const msgs = {\n      'mobile-ingame': `Submit a word or pass`,\n      'mobile-gameover': `Submit your leftovers`,\n      'desktop-ingame': `${playerName}, submit a word or pass`,\n      'desktop-gameover': `${playerName}, submit your leftovers`,\n    }\n    return msgs[`${isMobile ? 'mobile' : 'desktop'}-${game.isGameOver() ? 'gameover' : 'ingame'}`]\n  }\n\n  return (\n    <div className=\"row justify-content-center\">\n      <span className=\"call-player-to-action\">{callPlayerToAction()}</span>\n    </div>\n  )\n}\n\nexport default CallPlayerToAction\n","import React from 'react'\nimport ScoreGridCell from './ScoreGridCell'\nimport CallPlayerToAction from '../ScrabbleScoreKeeper/CallPlayerToAction'\nimport './ScoreGrid.css'\n\nclass ScoreGridMobile extends React.Component {\n  moveRowText(i) {\n    const { game } = this.props\n    return game.isMoveInGameOver(i) ? 'Leftovers Accounting' : `Move ${i + 1}`\n  }\n\n  render() {\n    const { playerNames, game, onSetGame, language } = this.props\n    const totalScores = [...Array(playerNames.length)].map((_, j) => game.getRunningTotals(j))\n    const toDisplayTotals = (turn) => {\n      if (!game.areLeftOversSubmitted()) {\n        return turn.isComplete(game)\n      }\n      return true\n    }\n    const numRows = game.isGameOver() ? game.leftOversTurnNumber + 1 : game.getCurrentTurnNumber() + 1\n\n    const isCurrentPlayersTurn = (player, turnIndex) =>\n      player === game.getCurrentPlayer() &&\n      player[turnIndex].isEmpty() &&\n      !player[turnIndex].isPassed(game) &&\n      !player[turnIndex].bingo\n    return (\n      <table className=\"table table-bordered score-grid-table\">\n        <thead>\n          <tr className=\"thead-rows\">\n            <th className=\"playerNames\" scope=\"col\">\n              Names\n              <br />\n              (Total)\n            </th>\n            <th className=\"playerTurn\" scope=\"col\">\n              Player Turn\n            </th>\n          </tr>\n        </thead>\n        <tbody key=\"tbody\" className=\"tbody-rows\">\n          {[...Array(numRows)].map((_, i) => {\n            const moveRow = (\n              <tr key={`moverow${i}`} className=\"move-row\">\n                <td colSpan=\"2\">{this.moveRowText(i)}</td>\n              </tr>\n            )\n            const playerRows = game.playersTurns.map((player, j) =>\n              player[i] ? (\n                <tr key={`move${i}_player${j}`} className=\"player-move-row\">\n                  <td className=\"text-center\">\n                    {playerNames[j]}\n                    <br />\n                    {toDisplayTotals(player[i]) ? totalScores[j][i] : null}\n                  </td>\n\n                  <td className=\"player-turn\">\n                    {isCurrentPlayersTurn(player, i) ? (\n                      <table className=\"score-grid-cell\">\n                        <tbody>\n                          <tr>\n                            <td>\n                              <CallPlayerToAction game={game} playerNames={playerNames} isMobile />\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    ) : (\n                      <ScoreGridCell turn={player[i]} move={i} language={language} game={game} onSetGame={onSetGame} />\n                    )}\n                  </td>\n                </tr>\n              ) : null\n            )\n            return [moveRow, playerRows]\n          })}\n        </tbody>\n      </table>\n    )\n  }\n}\nexport default ScoreGridMobile\n","import React from 'react'\nimport TooltipTrigger from 'react-popper-tooltip'\nimport 'react-popper-tooltip/dist/styles.css'\nimport './Tooltip.css'\n\nconst Tooltip = ({ children, tooltip, hideArrow, ...props }) => (\n  <TooltipTrigger\n    {...props}\n    tooltip={({ arrowRef, tooltipRef, getArrowProps, getTooltipProps, placement }) => (\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          className: 'tooltip-container',\n        })}>\n        {!hideArrow && (\n          <div\n            {...getArrowProps({\n              ref: arrowRef,\n              className: 'tooltip-arrow',\n              'data-placement': placement,\n            })}\n          />\n        )}\n        {tooltip}\n      </div>\n    )}>\n    {({ getTriggerProps, triggerRef }) => (\n      <span\n        {...getTriggerProps({\n          ref: triggerRef,\n          className: 'trigger',\n        })}>\n        {children}\n      </span>\n    )}\n  </TooltipTrigger>\n)\n\nexport default Tooltip\n","import React from 'react'\n\nclass ModifierTile extends React.Component {\n  tileText() {\n    const { modifier } = this.props\n    switch (modifier) {\n      case 'double-letter':\n        return 'Double letter score'\n      case 'double-word':\n        return 'Double word score'\n      case 'triple-letter':\n        return 'Triple letter score'\n      case 'triple-word':\n        return 'Triple word score'\n      case 'blank':\n        return 'Blank tile'\n      default:\n        return null\n    }\n  }\n\n  render() {\n    const { onClick, modifier } = this.props\n    return (\n      <span\n        role=\"button\"\n        onClick={(e) => onClick(modifier, e)}\n        onKeyDown={(e) => onClick(modifier, e)}\n        onTouchEnd={(e) => onClick(modifier, e)}\n        className={`modifier ${modifier}`}>\n        {this.tileText()}\n      </span>\n    )\n  }\n}\n\nexport default ModifierTile\n","import React from 'react'\nimport Tooltip from '../Tooltip/Tooltip'\nimport ModifierTile from './ModifierTile'\nimport { toggleModifiers } from '../../logic/util'\n\nclass WithModifierPopover extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.state = {\n      modifiers: [],\n      tooltipShown: false,\n    }\n  }\n\n  handleClick(modifier, e) {\n    const { modifiers } = this.state\n    const { onChange } = this.props\n    const newModifiers = toggleModifiers(modifiers, modifier)\n    this.setState({ modifiers: newModifiers, tooltipShown: false })\n    onChange(newModifiers)\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  handleVisibilityChange(argument) {\n    this.setState({ tooltipShown: argument })\n  }\n\n  render() {\n    const { tooltipShown } = this.state\n    const { children } = this.props\n    return (\n      <Tooltip\n        onVisibilityChange={this.handleVisibilityChange}\n        tooltipShown={tooltipShown}\n        placement=\"bottom\"\n        trigger=\"click\"\n        portalContainer={document.getElementsByClassName('scrabble-input-box')[0]}\n        tooltip={\n          <div>\n            <div className=\"modifier-buttons\">\n              <ModifierTile modifier=\"double-letter\" onClick={this.handleClick} />\n              <ModifierTile modifier=\"double-word\" onClick={this.handleClick} />\n              <ModifierTile modifier=\"triple-letter\" onClick={this.handleClick} />\n              <ModifierTile modifier=\"triple-word\" onClick={this.handleClick} />\n              <ModifierTile modifier=\"blank\" onClick={this.handleClick} />\n            </div>\n            <span className=\"star-hint\">↑ Press on the star</span>\n          </div>\n        }>\n        {children}\n      </Tooltip>\n    )\n  }\n}\n\nexport default WithModifierPopover\n","import React from 'react'\nimport { resizeArray, scrabbleScore, isLetterAllowed, logEvent } from '../../logic/util'\nimport WithModifierPopover from './WithModifierPopover'\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile'\nimport './ScrabbleInputBox.css'\n\nclass ScrabbleInputBox extends React.Component {\n  constructor(props) {\n    super(props)\n    this.textHiddenInput = React.createRef()\n    this.focus = this.focus.bind(this)\n    this.handleHiddenInputChange = this.handleHiddenInputChange.bind(this)\n    this.handleTileClick = this.handleTileClick.bind(this)\n    this.state = {\n      inFocus: false,\n    }\n  }\n\n  handleHiddenInputChange(e) {\n    const { language, word, onChange } = this.props\n    const input = e.target.value.substring(0, 15) /* maxLength does not always work on Android */\n    const result = input.split('').map((letter) => (isLetterAllowed(letter, language) ? letter : ''))\n    const modifiers = resizeArray(word.modifiers, result.length, [])\n    onChange({ value: result.join(''), modifiers })\n  }\n\n  handleModifierChange(letterIndex, modifier) {\n    const { word, onChange } = this.props\n    const modifiers = word.modifiers.slice()\n    modifiers[letterIndex] = modifier\n    onChange({ value: word.value, modifiers })\n\n    logEvent('add-modifier', { letterIndex, modifier: modifier.join() })\n  }\n\n  handleTileClick() {\n    this.focus()\n  }\n\n  focus() {\n    this.textHiddenInput.current.focus()\n  }\n\n  render() {\n    const { language, word } = this.props\n    const { inFocus } = this.state\n\n    function handleArrowClick(e) {\n      if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {\n        e.preventDefault()\n      }\n    }\n\n    return (\n      <div\n        role=\"textbox\"\n        onClick={this.focus}\n        onKeyDown={this.focus}\n        className={`scrabble-input-box${word.value.length > 8 ? ' large' : ''}`}>\n        <input\n          ref={this.textHiddenInput}\n          onChange={this.handleHiddenInputChange}\n          onKeyDown={(e) => handleArrowClick(e)}\n          value={word.value}\n          className=\"hidden-input\"\n          onBlur={() => this.setState({ inFocus: false })}\n          onFocus={() => this.setState({ inFocus: true })}\n          type=\"text\"\n          maxLength=\"15\"\n          autoComplete=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          autoCorrect=\"off\"\n        />\n        <div className={inFocus ? 'scrabble-tiles blinker' : 'scrabble-tiles'}>\n          {word.value.split('').map((letter, letterIndex) => (\n            <WithModifierPopover\n              onChange={(modifier) => this.handleModifierChange(letterIndex, modifier)}\n              key={letterIndex}>\n              <ScrabbleTile\n                onClick={this.handleTileClick}\n                letter={letter}\n                score={scrabbleScore(letter, [[]], language)}\n                modifier={word.modifiers[letterIndex]}\n              />\n            </WithModifierPopover>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ScrabbleInputBox\n","import React from 'react'\nimport { scrabbleScore, logEvent, scrollToTop, loggableWord, loggableGame } from '../../logic/util'\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox'\n\nconst emptyWord = { value: '', modifiers: [], score: 0 }\n\nclass InGameControls extends React.Component {\n  input = React.createRef()\n  form = React.createRef()\n\n  state = {\n    currentWord: emptyWord,\n  }\n\n  _scrollToTop = () => {\n    const { isMobile } = this.props\n\n    if (!isMobile) return\n\n    scrollToTop()\n  }\n\n  componentDidMount() {\n    const { game } = this.props\n\n    if (this.input.current) this.input.current.focus()\n    if (game.getCurrentTurnNumber() === 0) this._scrollToTop()\n  }\n\n  getSnapshotBeforeUpdate(_prevProps, _prevState) {\n    return { rect: this.getBoundingClientRect() }\n  }\n\n  componentDidUpdate(_prevProps, _prevState, snapshot) {\n    this.adjustScrollPosition(snapshot.rect)\n  }\n\n  getBoundingClientRect() {\n    return this.form.current.getBoundingClientRect()\n  }\n\n  adjustScrollPosition(prevRect) {\n    const rect = this.getBoundingClientRect()\n    window.scrollBy(0, rect.top - prevRect.top)\n  }\n\n  onSetGame(game) {\n    const { onSetGame } = this.props\n    onSetGame(game)\n    this.resetCurrentWord()\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord })\n    if (this.input.current) this.input.current.focus()\n  }\n\n  reloadLastWord() {\n    const { game } = this.props\n    this.setState({ currentWord: game.getLastWord() || emptyWord })\n    if (this.input.current) this.input.current.focus()\n  }\n\n  handleChange = (word) => {\n    const { language } = this.props\n    const currentWord = {\n      ...word,\n      score: scrabbleScore(word.value, word.modifiers, language),\n    }\n    this.setState({ currentWord })\n  }\n\n  handleUndo = () => {\n    const { onUndo } = this.props\n    onUndo()\n    this.reloadLastWord()\n\n    logEvent('undo')\n  }\n\n  handleAddWord = () => {\n    const { currentWord } = this.state\n    const { game } = this.props\n    this.onSetGame(game.addWord(currentWord))\n\n    logEvent('add-word', { word: loggableWord(this.state.currentWord) })\n  }\n\n  handleEndTurn = (e) => {\n    const { currentWord } = this.state\n    let { game } = this.props\n    if (currentWord.value.length !== 0) game = game.addWord(currentWord)\n    this.onSetGame(game.endTurn())\n\n    const data = currentWord.value.length !== 0 ? { word: loggableWord(this.state.currentWord) } : { passed: true }\n    logEvent('end-turn', data)\n  }\n\n  handleBingo = () => {\n    const { game, onSetGame } = this.props\n    onSetGame(game.setBingo(!game.getCurrentTurn().bingo))\n    this.input.current.focus()\n\n    logEvent('toggle-bingo')\n  }\n\n  handleEndGame = () => {\n    const { game, onSetGame } = this.props\n    onSetGame(game.endGame())\n\n    logEvent('end-game', loggableGame(game))\n  }\n\n  render() {\n    const { currentWord } = this.state\n    const { game, language, undoDisabled } = this.props\n    const isCurrentWordEmpty = game.getCurrentTurn().isEmpty() && currentWord.value === ''\n    const endTurnButtonText = isCurrentWordEmpty ? 'PASS' : 'END TURN'\n    const isEndGameDisabled =\n      game.currentPlayerIndex !== 0 ||\n      currentWord.value !== '' ||\n      game.getCurrentTurn().score > 0 ||\n      game.playersTurns[game.getCurrentPlayerIndex()].length === 1\n    const isBingoDisabled = ![...game.getCurrentTurn().words, currentWord].some((word) => word.value.length >= 7)\n\n    const isModifierChosen = currentWord.modifiers.some((modifier) => modifier.length !== 0)\n    const isInstructionShown =\n      game.getCurrentTurnNumber() === 0 &&\n      game.getCurrentPlayerIndex() === 0 &&\n      !isModifierChosen &&\n      currentWord.value !== ''\n    const isFirstTurn = game.getCurrentTurnNumber() === 0 && game.getCurrentPlayerIndex() === 0\n    const isEndTurnDisabled = !isModifierChosen && !isCurrentWordEmpty && isFirstTurn\n    const props = {\n      ref: this.input,\n      onChange: this.handleChange,\n      word: currentWord,\n      language,\n    }\n\n    return (\n      <form ref={this.form} className={isFirstTurn ? 'first-turn' : null} onSubmit={(e) => e.preventDefault()}>\n        <ScrabbleInputBox {...props} />\n        <div className={`instruction-message ${isInstructionShown ? '' : 'hide'}`}>↑ Press on a letter</div>\n\n        <div className=\"buttons\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <button onClick={this.handleEndTurn} type=\"submit\" className=\"btn\" disabled={isEndTurnDisabled}>\n                {endTurnButtonText}\n              </button>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button\n                onClick={this.handleAddWord}\n                type=\"button\"\n                className=\"btn middle-scroll-anchor\"\n                disabled={currentWord.value === '' || isFirstTurn}>\n                + ADD A WORD\n              </button>\n            </div>\n            <div className=\"col\">\n              <input\n                onChange={this.handleBingo}\n                type=\"checkbox\"\n                id=\"bingoToggle\"\n                checked={game.getCurrentTurn().bingo}\n                disabled={isBingoDisabled}\n              />\n              <label className={`btn bingo ${isBingoDisabled ? 'disabled' : ''}`} htmlFor=\"bingoToggle\">\n                BINGO\n              </label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn\" disabled={undoDisabled}>\n                UNDO\n              </button>\n            </div>\n            <div className=\"col\">\n              <button onClick={this.handleEndGame} type=\"button\" className=\"btn\" disabled={isEndGameDisabled}>\n                END GAME\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\nexport default InGameControls\n","import React from 'react'\nimport { scrabbleScore, logEvent } from '../../logic/util'\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox'\n\nconst emptyWord = { value: '', modifiers: [], score: 0 }\n\nclass InGameOverControls extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleUndo = this.handleUndo.bind(this)\n    this.handleLeftOvers = this.handleLeftOvers.bind(this)\n    this.handleNewGame = this.handleNewGame.bind(this)\n    this.input = React.createRef()\n    this.state = {\n      currentWord: emptyWord,\n    }\n  }\n\n  componentDidMount() {\n    if (this.input.current) this.input.current.focus()\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord })\n    if (this.input.current) this.input.current.focus()\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props\n    onUndo()\n    this.resetCurrentWord()\n\n    logEvent('undo')\n  }\n\n  handleChange(word) {\n    const { language } = this.props\n    const currentWord = {\n      ...word,\n      score: -scrabbleScore(word.value, word.modifiers, language),\n    }\n    this.setState({ currentWord })\n  }\n\n  handleNewGame() {\n    const { onNewGame } = this.props\n    onNewGame({ reset: true })\n    logEvent('new-game')\n  }\n\n  handleLeftOvers(e) {\n    const { currentWord } = this.state\n    const { onSetGame } = this.props\n    let { game } = this.props\n\n    e.preventDefault() /* prevent form submission */\n\n    if (currentWord.value.length !== 0) game = game.addWord(currentWord)\n\n    game = game.endTurn()\n\n    if (game.currentPlayerIndex === 0)\n      game = game.distributeLeftOversToReapers(game.getReapers(), game.getSumOfLeftovers())\n\n    onSetGame(game)\n    this.resetCurrentWord()\n\n    const data =\n      currentWord.value.length !== 0 ? { leftovers: currentWord.value } : { leftovers: 'No leftovers submitted' }\n    logEvent('submit-leftovers', data)\n  }\n\n  render() {\n    const { currentWord } = this.state\n    const { game, language, undoDisabled } = this.props\n    const submitButtonText = currentWord.value.length > 0 ? 'SUBMIT LEFTOVERS' : 'SUBMIT NO LEFTOVERS'\n    return (\n      <div>\n        {!game.areLeftOversSubmitted() ? (\n          <form autoComplete=\"off\">\n            <ScrabbleInputBox ref={this.input} onChange={this.handleChange} word={currentWord} language={language} />\n            <div className=\"buttons\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button onClick={this.handleLeftOvers} type=\"submit\" className=\"btn\">\n                    {submitButtonText}\n                  </button>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button onClick={this.handleUndo} type=\"button\" className=\"btn\" disabled={undoDisabled}>\n                    UNDO\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        ) : (\n          <div className=\"buttons\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <button onClick={this.handleNewGame} type=\"button\" className=\"btn\">\n                  NEW GAME\n                </button>\n              </div>\n            </div>\n            <div className=\"rate-me\">\n              <div className=\"row apple\">\n                <div className=\"col\">\n                  <a\n                    className=\"btn app-store-rating\"\n                    href=\"https://apps.apple.com/us/app/scrabble-score-calculator/id1497216063\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <span role=\"img\" aria-label=\"Star\">\n                      ⭐\n                    </span>{' '}\n                    RATE US ON THE APP STORE{' '}\n                    <span role=\"img\" aria-label=\"Star\">\n                      ⭐\n                    </span>\n                  </a>\n                </div>\n              </div>\n              <div className=\"row playmarket\">\n                <div className=\"col\">\n                  <a\n                    className=\"btn android-rating\"\n                    href=\"https://play.google.com/store/apps/details?id=com.saintmarina.scrabblescore\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <span role=\"img\" aria-label=\"Star\">\n                      ⭐\n                    </span>{' '}\n                    RATE US ON PLAY STORE{' '}\n                    <span role=\"img\" aria-label=\"Star\">\n                      ⭐\n                    </span>\n                  </a>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <button onClick={this.handleUndo} type=\"button\" className=\"btn\" disabled={undoDisabled}>\n                  UNDO\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default InGameOverControls\n","import React from 'react'\nimport Game from '../../logic/game'\nimport ScoreGrid from '../ScoreGrid/ScoreGrid'\nimport ScoreGridMobile from '../ScoreGrid/ScoreGridMobile'\nimport CallPlayerToAction from './CallPlayerToAction'\nimport InGameControls from './InGameControls'\nimport InGameOverControls from './InGameOverControls'\nimport { getPersistedState, persistState } from '../../logic/util'\n\nclass ScoreKeeper extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleUndo = this.handleUndo.bind(this)\n    this.handleSetGame = this.handleSetGame.bind(this)\n    this.renderWinner = this.renderWinner.bind(this)\n\n    const { playerNames } = this.props\n    const restoredState = getPersistedState('gameState')\n    this.state = restoredState\n      ? {\n          game: Game.fromPlain(restoredState.game),\n          games: restoredState.games.map(Game.fromPlain),\n        }\n      : {\n          game: Game.createNewGame(playerNames.length),\n          games: [],\n        }\n  }\n\n  handleSetGame(currentGame, addToUndoStack = true) {\n    const { game, games } = this.state\n    const { playerNames } = this.props\n    const newState = { game: currentGame, games: addToUndoStack ? [...games.slice(), game] : games }\n    this.setState(newState)\n    persistState('gameState', { playerNames: playerNames, ...newState })\n  }\n\n  handleUndo() {\n    const { games } = this.state\n    const { playerNames } = this.props\n    const ignoreLastGame = this.undoShouldIgnoreLastGame()\n    const previousGames = games.slice(0, ignoreLastGame ? -2 : -1)\n    const game = games[games.length - (ignoreLastGame ? 2 : 1)]\n    const newState = { game, games: previousGames }\n    this.setState(newState)\n    persistState('gameState', { playerNames: playerNames, ...newState })\n  }\n\n  /**\n   * This is a bit of a weird one. If there are no changes to the current player's\n   * turns in the two last games, we ignore the last game. If we don't, we end\n   * up duplicating the last word for the current player. This situation occurs\n   * when The user clicks \"End Turn\" after clicking \"Add Word\" and not actually\n   * adding a word.\n   */\n  undoShouldIgnoreLastGame() {\n    const { game, games } = this.state\n    const lastGame = games[games.length - 1]\n    if (!lastGame) return false\n    const playerIndex = lastGame.getCurrentPlayerIndex()\n    const lastPlayerTurn = lastGame.playersTurns[playerIndex].slice(-1)[0]\n    const currentPlayerTurn = game.playersTurns[playerIndex].slice(-1)[0]\n    if (!lastPlayerTurn.words.length) return false\n    return JSON.stringify(lastPlayerTurn) === JSON.stringify(currentPlayerTurn)\n  }\n\n  renderWinner() {\n    const { game } = this.state\n    const { playerNames } = this.props\n    const turnBeforeLeftOvers = game.leftOversTurnNumber - 1\n    const winners = game.getWinners()\n    if (winners.length > 1) {\n      const winnersTie = game.getWinners(turnBeforeLeftOvers)\n      return winnersTie\n        .map((winnerIndex) =>\n          winnersTie.length > 1\n            ? `${playerNames[winnerIndex]}: ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points`\n            : `${playerNames[winnerIndex]} won with ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points!`\n        )\n        .join(', ')\n    }\n    return `${playerNames[winners[0]]} won with ${game.getTotalScore(winners[0])} points!`\n  }\n\n  render() {\n    const { game, games } = this.state\n    const { playerNames, language, isMobile, onNewGame } = this.props\n\n    const controlProps = {\n      onSetGame: this.handleSetGame,\n      onUndo: this.handleUndo,\n      undoDisabled: games.length === 0,\n      onNewGame,\n      isMobile,\n      game,\n      language,\n    }\n\n    const toDisplayCallPlayerToAction = () => {\n      if (!isMobile) {\n        return <CallPlayerToAction game={game} playerNames={playerNames} isMobile={isMobile} />\n      }\n    }\n\n    return (\n      <div className=\"score-keeper\">\n        <div className=\"container\">\n          <div id=\"small-logo\" onClick={onNewGame}>\n            <img src=\"logo.png\" alt=\"Scrabble score logo\" />\n          </div>\n          <h1 className=\"title\">Score Sheet</h1>\n          {isMobile ? (\n            <ScoreGridMobile playerNames={playerNames} game={game} language={language} onSetGame={this.handleSetGame} />\n          ) : (\n            <ScoreGrid playerNames={playerNames} game={game} language={language} />\n          )}\n          {!game.areLeftOversSubmitted() ? (\n            toDisplayCallPlayerToAction()\n          ) : (\n            <div className=\"winner\">\n              <h1>{this.renderWinner()}</h1>\n            </div>\n          )}\n          {!game.isGameOver() ? <InGameControls {...controlProps} /> : <InGameOverControls {...controlProps} />}\n          {this.renderLuckOrSkill()}\n        </div>\n      </div>\n    )\n  }\n\n  renderLuckOrSkill() {\n    const game = this.state.game\n    const luckFactors = game.getLuckFactors(this.props.language)\n    return (\n      <div style={{ paddingTop: 16 }}>\n        <table className=\"table table-bordered\">\n          <tbody className=\"tbody-rows\">\n            <tr className=\"move-row\">\n              <td></td>\n              <td>Tile Count</td>\n              <td>Value</td>\n              <td>Multiple</td>\n            </tr>\n            {luckFactors.map((vals, i) => {\n              const turnBeforeLeftOvers = game.leftOversTurnNumber\n                ? game.leftOversTurnNumber - 1\n                : game.playersTurns[i].length - 1\n              console.log(game.getTotalScore(i, turnBeforeLeftOvers), vals.score)\n              return (\n                <tr key={i} className=\"move-row\">\n                  <td>{this.props.playerNames[i]}</td>\n                  <td>{vals.placed}</td>\n                  <td>{vals.score}</td>\n                  <td>\n                    {vals.score\n                      ? Math.round((game.getTotalScore(i, turnBeforeLeftOvers) / vals.score) * 100) / 100\n                      : '-'}\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default ScoreKeeper\n","import ReactGA from 'react-ga'\nimport React from 'react'\nimport GameSettings from '../GameSettings/GameSettings'\nimport ShouldResume from '../GameSettings/ShouldResume'\nimport ScoreKeeper from './ScoreKeeper'\nimport './App.css'\nimport { logEvent, getPersistedState, clearPersistedState } from '../../logic/util'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleGameStart = this.handleGameStart.bind(this)\n    this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this)\n    this.handlePopState = this.handlePopState.bind(this)\n    this.handleResetGame = this.handleResetGame.bind(this)\n    /*\n      DO NOT CHANGE INITIAL STATE:\n      the initial rendering of the component and the static rendering must be the same\n    */\n    this.state = {\n      resumeState: null,\n      playerNames: [],\n      language: 'en',\n      width: 10,\n    }\n  }\n\n  componentDidMount() {\n    /*\n     * pushState() allows to modifiy browser history entries;\n     * popstate listens for changes in browser history,like back/front button click;\n     * when history is changed, this.handlePopState function is being fired;\n     * this.handlePopState changes state for ScrabbleScoreKeeper component;\n     * ScrabbleScoreKeeper component rerenders, displaying correct state;\n     */\n\n    const { playerNames } = this.state\n    window.history.pushState({ playerNames: playerNames }, null)\n    window.addEventListener('popstate', this.handlePopState)\n\n    ReactGA.initialize('UA-144533310-1')\n    ReactGA.pageview(window.location.pathname + window.location.search)\n    this.handleWindowSizeChange()\n\n    const resumeState = getPersistedState('gameState')\n    this.setState({ resumeState })\n  }\n\n  UNSAFE_componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange)\n    window.removeEventListener('popstate', this.handlePopState)\n  }\n\n  handlePopState(event) {\n    const stateObj = event.state\n    this.setState({ playerNames: stateObj.playerNames })\n  }\n\n  handleWindowSizeChange() {\n    this.setState({ width: window.innerWidth })\n  }\n\n  handleGameStart(playerNames, language) {\n    logEvent('start-game', {\n      'player-names': playerNames,\n      language: language,\n      'num-players': playerNames.length,\n    })\n    window.history.pushState({ playerNames: playerNames }, null)\n    this.setState({ playerNames, language })\n  }\n\n  handleResetGame({ reset }) {\n    if (reset) clearPersistedState('gameState')\n\n    const resumeState = getPersistedState('gameState')\n    this.setState({ resumeState })\n    this.setState({ playerNames: [] })\n  }\n\n  renderGame(isMobile) {\n    const { resumeState, playerNames, language } = this.state\n\n    if (resumeState) {\n      const handleResume = (resume) => {\n        if (resume) this.setState({ playerNames: resumeState.playerNames })\n        else clearPersistedState('gameState')\n        this.setState({ resumeState: null })\n        logEvent('game-resume', { resume })\n      }\n      return <ShouldResume onResume={handleResume} />\n    }\n\n    return playerNames.length === 0 ? (\n      <GameSettings onGameStart={this.handleGameStart} />\n    ) : (\n      <ScoreKeeper onNewGame={this.handleResetGame} playerNames={playerNames} language={language} isMobile={isMobile} />\n    )\n  }\n\n  render() {\n    const { width } = this.state\n    const isMobile = width <= 815\n    return <div className={`main mb-5 ${isMobile ? 'mobile' : 'desktop'}`}>{this.renderGame(isMobile)}</div>\n  }\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { hydrate, render } from 'react-dom'\nimport './index.css'\nimport App from './components/ScrabbleScoreKeeper/App'\nimport * as serviceWorker from './serviceWorker'\nimport { logEventInit } from './logic/util'\n\n/*This initializes amplitude event tracking instance*/\nlogEventInit()\n\nconst rootElement = document.getElementsByClassName('content')[0]\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement)\n} else {\n  render(<App />, rootElement)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}